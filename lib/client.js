// Generated by CoffeeScript 1.6.3
(function() {
  var Client, SRP, transform;

  transform = require('./transform');

  SRP = require('./srp');

  Client = (function() {
    function Client(length) {
      length = length || 4096;
      this.srp = new SRP(length);
    }

    Client.prototype.init = function(options, callback) {
      var _this = this;
      this.IBuf = new Buffer(options.username);
      this.PBuf = new Buffer(options.password);
      return this.srp.a(function(err, a) {
        _this.aInt = a;
        _this.ABuf = _this.srp.A({
          a: _this.aInt
        });
        return callback();
      });
    };

    Client.prototype.debugInit = function(options, callback) {
      this.IBuf = new Buffer(options.username);
      this.PBuf = new Buffer(options.password);
      this.aInt = options.a;
      this.ABuf = this.srp.A({
        a: this.aInt
      });
      return callback();
    };

    Client.prototype.getPublicKey = function() {
      return this.ABuf.toString('hex');
    };

    Client.prototype.setSalt = function(hexSalt) {
      this.saltBuf = new Buffer(hexSalt, 'hex');
      return this.xInt = this.srp.x({
        I: this.IBuf,
        P: this.PBuf,
        salt: this.saltBuf
      });
    };

    Client.prototype.setServerPublicKey = function(hexB) {
      var BBigInt;
      this.BBuf = new Buffer(hexB, 'hex');
      BBigInt = transform.buffer.toBigInteger(this.BBuf);
      if (this.srp.isZeroWhenModN(BBigInt)) {
        throw Error('Invalid B value, abort');
      }
      this.uInt = this.srp.u({
        A: this.ABuf,
        B: this.BBuf
      });
      this.SBuf = this.srp.clientS({
        B: transform.buffer.toBigInteger(this.BBuf),
        a: this.aInt,
        u: this.uInt,
        x: this.xInt
      });
      return this.KBuf = this.srp.K({
        S: this.SBuf
      });
    };

    Client.prototype.getProof = function() {
      this.M1Buf = this.srp.M1({
        A: this.ABuf,
        B: this.BBuf,
        K: this.KBuf
      });
      return this.M1Buf.toString('hex');
    };

    Client.prototype.checkServerProof = function(hexM2) {
      var ServerM2Buf, result;
      ServerM2Buf = new Buffer(hexM2, 'hex');
      this.M2Buf = this.srp.M2({
        A: this.ABuf,
        M: this.M1Buf,
        K: this.KBuf
      });
      result = this.M2Buf.toString('hex') === ServerM2Buf.toString('hex');
      return result;
    };

    Client.prototype.getSharedKey = function() {
      return this.KBuf.toString('hex');
    };

    Client.prototype.createVerifier = function(options) {
      var result;
      this.IBuf = new Buffer(options.username);
      this.PBuf = new Buffer(options.password);
      this.saltBuf = new Buffer(options.salt);
      result = this.srp.v({
        I: this.IBuf,
        P: this.PBuf,
        salt: this.saltBuf
      });
      result = result.toString('hex');
      return result;
    };

    Client.prototype.getSalt = function() {
      return this.saltBuf.toString('hex');
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
